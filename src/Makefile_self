# define the C compiler to use
CC = g++

# define any compile-time flags
CFLAGS = --std=c++11

# define any directories containing header files other than /usr/include
#
INCLUDES = -I.

# define any libraries to link into executable:
#   if I want to link in libraries (libx.so or libx.a) I use the -llibname 
#   option, something like (this will link in libmylib.so and libm.so:
LIBS = -lgmp -lntl

# define the C source files
SRCS = main.cpp aes.cpp ArithmeticCircuit.cpp CommBF.cpp Common.cpp ConfigFile.cpp GF2_8LookupTable.cpp MPCCommunicationBF.cpp Prg.cpp Protocol.cpp SecurityLevel.cpp TemplateField.cpp

# define the C object files 
#
# This uses Suffix Replacement within a macro:
#   $(name:string1=string2)
#         For each word in 'name' replace 'string1' with 'string2'
# Below we are replacing the suffix .c of all words in the macro SRCS
# with the .bc suffix
#
OBJS = $(SRCS:.cpp=.o)

# define the executable file 
MAIN = protocol

#
# The following part of the makefile is generic; it can be used to 
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

.PHONY: depend clean

all: $(MAIN)
	@echo  Simple compiler named mycc has been compiled

$(MAIN): $(OBJS) 
	$(CC) $(CFLAGS) $(INCLUDES) -o $(MAIN) $(OBJS) $(LIBS)


# this is a suffix replacement rule for building .o's from .c's
# it uses automatic variables $<: the name of the prerequisite of
# the rule(a .c file) and $@: the name of the target of the rule (a .bc file) 
# (see the gnu make manual section about automatic variables)
%.o: %.cpp
	$(CC) $(CFLAGS) $(INCLUDES) $< -o $@

clean:
	-rm -rf *.o $(MAIN)

depend: $(SRCS)
	makedepend $(INCLUDES) $^

# DO NOT DELETE THIS LINE -- make depend needs it
